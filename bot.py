import sqlite3
import os
from datetime import datetime, timedelta, timezone, date
from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import connect, add_user, get_user, get_all_users, DB_PATH

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.environ.get("API_ID"))
api_hash = os.environ.get("API_HASH")
bot_token = os.environ.get("BOT_TOKEN")
admin_id = int(os.environ.get("ADMIN_ID"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
connect()
app = Client("hockey_predictor_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)
session = {}

@app.on_message(filters.command("start"))
def start(client, message):
    user = message.from_user
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. Username: {user.username}, First name: {user.first_name}")
    
    if not get_user(user.id):
        add_user(user.id, user.username, user.first_name, user.last_name)

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üìÖ –ú–∞—Ç—á–∏")],
        [KeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")],
        [KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã")]
    ], resize_keyboard=True)

    message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üèí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ö–æ–∫–∫–µ–π–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä!", reply_markup=keyboard)

@app.on_message(filters.command("add_match") & filters.user(ADMIN_ID))
def add_match(client, message):
    parts = message.text.strip().split()
    if len(parts) != 5:
        message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_match <–ö–æ–º–∞–Ω–¥–∞1> <–ö–æ–º–∞–Ω–¥–∞2> <–î–î-–ú–ú> <–ß–ß:–ú–ú>")
        return

    _, team1, team2, date_part, time_part = parts
    try:
        day, month = map(int, date_part.split("-"))
        match_date = date(2025, month, day).strftime("%Y-%m-%d")
        datetime.strptime(time_part, "%H:%M")
    except:
        message.reply_text("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO matches (team1, team2, match_date, match_time) VALUES (?, ?, ?, ?)",
                   (team1, team2, match_date, time_part))
    conn.commit()
    conn.close()

    message.reply_text(f"‚úÖ –ú–∞—Ç—á {team1} vs {team2} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {date_part} –≤ {time_part}.")

    try:
        users = get_all_users()
        for user_id in users:
            try:
                app.send_message(
                    user_id,
                    f"üì£ –ù–æ–≤—ã–π –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {team1} vs {team2} ‚Äî {date_part} –≤ {time_part}"
                )
            except Exception as e:
                print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@app.on_message(filters.text & filters.regex(r"^üìÖ –ú–∞—Ç—á–∏$"))
def show_matches(client, message):
    now_moscow = datetime.now(timezone.utc) + timedelta(hours=3)

    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT match_id, team1, team2, match_date, match_time, result FROM matches")
    matches = cursor.fetchall()
    conn.close()

    keyboard = []
    for match in matches:
        match_id, team1, team2, match_date, match_time, result = match
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ —Å —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if result:
            continue
            
        match_time = match_time or "00:00"
        try:
            match_datetime = datetime.strptime(f"{match_date} {match_time}", "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
            if now_moscow >= match_datetime:
                continue

            formatted_date = datetime.strptime(match_date, "%Y-%m-%d").strftime("%d.%m")
            keyboard.append([InlineKeyboardButton(f"{team1} vs {team2} ‚Äî {formatted_date}", callback_data=f"predict_{match_id}")])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ {match_id}: {e}")

    if keyboard:
        message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        message.reply_text("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.")

@app.on_callback_query(filters.regex(r"^predict_\d+$"))
def ask_for_prediction(client, callback_query):
    match_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT team1, team2, result FROM matches WHERE match_id = ?", (match_id,))
    match_info = cursor.fetchone()
    conn.close()
    
    if not match_info:
        callback_query.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    team1, team2, result = match_info
    
    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –≤–≤–µ–¥–µ–Ω, –Ω–µ –¥–∞–µ–º –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
    if result:
        callback_query.answer(f"–î–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –≤–≤–µ–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    session[f"prediction_{user_id}"] = match_id
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    callback_query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∞
    callback_query.message.reply_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞ {team1} vs {team2} –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2:1")

@app.on_message(filters.text & filters.regex(r"^\d+:\d+$"))
def handle_score_input(client, message):
    user_id = message.from_user.id
    score = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if f"add_result_{user_id}" in session:
        match_id = session[f"add_result_{user_id}"]
        conn = sqlite3.connect("hockey.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("UPDATE matches SET result = ? WHERE match_id = ?", (score, match_id))
        conn.commit()
        calculate_points(match_id, score)
        del session[f"add_result_{user_id}"]
        message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç {score} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if f"prediction_{user_id}" not in session:
        message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    match_id = session[f"prediction_{user_id}"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT result FROM matches WHERE match_id = ?", (match_id,))
    result = cursor.fetchone()
    
    if result and result[0]:
        message.reply_text(f"‚ùó –î–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –≤–≤–µ–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[0]}. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        del session[f"prediction_{user_id}"]
        conn.close()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    cursor.execute("INSERT OR REPLACE INTO predictions (user_id, match_id, prediction) VALUES (?, ?, ?)", (user_id, match_id, score))
    conn.commit()
    conn.close()
    del session[f"prediction_{user_id}"]
    message.reply_text(f"‚úÖ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ {score} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@app.on_message(filters.text & filters.regex(r"^üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã$"))
def show_prediction_menu(client, message):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –ú–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="my_predictions")],
        [InlineKeyboardButton("üë• –ü—Ä–æ–≥–Ω–æ–∑—ã –¥—Ä—É–≥–∏—Ö", callback_data="all_predictions")]
    ])
    message.reply_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=keyboard)

@app.on_callback_query(filters.regex(r"^my_predictions$"))
def show_my_predictions(client, callback_query):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT matches.team1, matches.team2, predictions.prediction, matches.result
        FROM predictions
        JOIN matches ON predictions.match_id = matches.match_id
        WHERE predictions.user_id = ?
    """, (user_id,))
    predictions = cursor.fetchall()
    conn.close()

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    callback_query.answer()

    if not predictions:
        callback_query.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.")
    else:
        response = "üìÑ **–í–∞—à–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã:**\n\n"
        for team1, team2, prediction, result in predictions:
            status = f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}" if result else "‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è"
            response += f"{team1} vs {team2} ‚Äî {prediction} | {status}\n"
        callback_query.message.reply_text(response)

@app.on_callback_query(filters.regex(r"^all_predictions$"))
def show_all_predictions(client, callback_query):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT users.username, users.first_name, matches.team1, matches.team2, predictions.prediction, matches.result
        FROM predictions
        JOIN matches ON predictions.match_id = matches.match_id
        JOIN users ON predictions.user_id = users.user_id
        WHERE predictions.user_id != ?
    """, (user_id,))
    predictions = cursor.fetchall()
    conn.close()

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    callback_query.answer()

    if not predictions:
        callback_query.message.reply_text("‚ùó –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        response = "üë• **–ü—Ä–æ–≥–Ω–æ–∑—ã –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:**\n\n"
        current_user = None
        for username, first_name, team1, team2, prediction, result in predictions:
            display_name = username or first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if display_name != current_user:
                current_user = display_name
                response += f"\n**{display_name}**\n"
            status = f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}" if result else "‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è"
            response += f"{team1} vs {team2} ‚Äî {prediction} | {status}\n"
        callback_query.message.reply_text(response)

@app.on_message(filters.command("add_result") & filters.user(ADMIN_ID))
def show_matches_for_result(client, message):
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT match_id, team1, team2 FROM matches WHERE result IS NULL")
    matches = cursor.fetchall()
    conn.close()

    if not matches:
        message.reply_text("‚ùó –ù–µ—Ç –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return

    keyboard = [
        [InlineKeyboardButton(f"{team1} vs {team2}", callback_data=f"add_result_{match_id}")]
        for match_id, team1, team2 in matches
    ]
    message.reply_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

@app.on_callback_query(filters.regex(r"^add_result_\d+$"))
def ask_for_result(client, callback_query):
    match_id = int(callback_query.data.split("_")[2])
    user_id = callback_query.from_user.id
    session[f"add_result_{user_id}"] = match_id
    
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT team1, team2 FROM matches WHERE match_id = ?", (match_id,))
    match_info = cursor.fetchone()
    conn.close()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    callback_query.answer()
    
    if match_info:
        team1, team2 = match_info
        callback_query.message.reply_text(f"üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {team1} vs {team2} –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2:1")
    else:
        callback_query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2:1")

@app.on_message(filters.text & filters.regex(r"^üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤$"))
def show_leaderboard(client, message):
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ leaderboard
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='leaderboard'")
    if not cursor.fetchone():
        message.reply_text("‚ùó –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
        conn.close()
        return
    
    cursor.execute("""
        SELECT users.username, users.first_name, leaderboard.points
        FROM leaderboard
        JOIN users ON leaderboard.user_id = users.user_id
        ORDER BY leaderboard.points DESC
    """)
    leaderboard = cursor.fetchall()
    conn.close()

    if not leaderboard:
        message.reply_text("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
        return

    response = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:**\n\n"
    for i, (username, first_name, points) in enumerate(leaderboard, 1):
        medal = ""
        if i == 1:
            medal = "ü•á "
        elif i == 2:
            medal = "ü•à "
        elif i == 3:
            medal = "ü•â "
        else:
            medal = f"{i}. "
        
        display_name = username or first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        response += f"{medal}**{display_name}** ‚Äî {points} –±–∞–ª–ª–æ–≤\n"
    message.reply_text(response)

def calculate_points(match_id, result, conn=None):
    try:
        r1, r2 = map(int, result.split(":"))
        outcome = (r1 > r2) - (r1 < r2)
        diff = abs(r1 - r2)

        own_connection = False
        if conn is None:
            conn = sqlite3.connect("hockey.db", check_same_thread=False)
            own_connection = True

        cursor = conn.cursor()
        cursor.execute("SELECT team1, team2 FROM matches WHERE match_id = ?", (match_id,))
        match_info = cursor.fetchone()
        
        if not match_info:
            print(f"–ú–∞—Ç—á —Å ID {match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if own_connection:
                conn.close()
            return
            
        team1, team2 = match_info

        cursor.execute("SELECT user_id, prediction FROM predictions WHERE match_id = ?", (match_id,))
        predictions = cursor.fetchall()

        for user_id, prediction in predictions:
            try:
                p1, p2 = map(int, prediction.split(":"))
            except:
                continue

            user_outcome = (p1 > p2) - (p1 < p2)
            user_diff = abs(p1 - p2)

            if p1 == r1 and p2 == r2:
                points = 3
            elif user_outcome == outcome and user_diff == diff:
                points = 2
            elif user_outcome == outcome:
                points = 1
            else:
                points = 0

            cursor.execute("INSERT OR IGNORE INTO leaderboard (user_id, points) VALUES (?, 0)", (user_id,))
            cursor.execute("UPDATE leaderboard SET points = points + ? WHERE user_id = ?", (points, user_id))

            try:
                app.send_message(
                    user_id,
                    f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {team1} vs {team2}: {r1}:{r2}\n"
                    f"üß† –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: {p1}:{p2}\n"
                    f"üéØ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {points}"
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç {user_id}: {e}")

        if own_connection:
            conn.commit()
            conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤: {e}")
        if conn and own_connection:
            conn.close()

@app.on_message(filters.command("matches") & filters.user(ADMIN_ID))
def list_all_matches(client, message):
    conn = sqlite3.connect("hockey.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT match_id, team1, team2, match_date, match_time, result FROM matches")
    matches = cursor.fetchall()
    conn.close()

    if not matches:
        message.reply_text("‚ùó –ù–µ—Ç –º–∞—Ç—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π:**\n\n"
    for match in matches:
        match_id, team1, team2, match_date, match_time, result = match
        formatted_date = datetime.strptime(match_date, "%Y-%m-%d").strftime("%d.%m")
        result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}" if result else "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        response += f"ID: {match_id} | {team1} vs {team2} | {formatted_date} {match_time} | {result_text}\n\n"

    message.reply_text(response)

@app.on_message(filters.command("debug") & filters.user(ADMIN_ID))
def debug_info(client, message):
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª–∞—Ö
    current_dir = os.getcwd()
    files = os.listdir(current_dir)
    
    response = f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}\n\n"
    response += "üìÑ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
    for file in files:
        file_path = os.path.join(current_dir, file)
        file_size = os.path.getsize(file_path) / 1024  # KB
        response += f"- {file} ({file_size:.2f} KB)\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(current_dir, "hockey.db")
    if os.path.exists(db_path):
        response += f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path} ({os.path.getsize(db_path)/1024:.2f} KB)"
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        conn = sqlite3.connect("hockey.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        response += "\n\nüìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n"
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table[0]}")
            count = cursor.fetchone()[0]
            response += f"- {table[0]}: {count} –∑–∞–ø–∏—Å–µ–π\n"
        
        conn.close()
    else:
        response += f"\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}"
    
    message.reply_text(response)

@app.on_message(filters.command("wipe") & filters.user(ADMIN_ID))
def wipe_database(client, message):
    try:
        import os
        from database import DB_PATH
        if os.path.exists(DB_PATH):
            os.remove(DB_PATH)
        connect()
        message.reply_text("‚ôªÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ.")
    except Exception as e:
        message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
app.run()
